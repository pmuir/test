Step: build-step-credential-initializer:

{"level":"warn","ts":1559405015.510594,"logger":"fallback-logger","caller":"logging/config.go:65","msg":"Fetch GitHub commit ID from kodata failed: \"ref: refs/heads/test\" is not a valid GitHub commit ID"}
{"level":"info","ts":1559405015.5131805,"logger":"fallback-logger","caller":"creds-init/main.go:40","msg":"Credentials initialized."}
Step: build-step-git-source-0:

{"level":"warn","ts":1559405016.7319503,"logger":"fallback-logger","caller":"logging/config.go:65","msg":"Fetch GitHub commit ID from kodata failed: \"ref: refs/heads/test\" is not a valid GitHub commit ID"}
{"level":"info","ts":1559405017.8443904,"logger":"fallback-logger","caller":"git-init/main.go:92","msg":"Successfully cloned \"https://github.com/pmuir/test.git\" @ \"master\" in path \"/workspace\""}
Step: build-step-jenkins:

Picked up _JAVA_OPTIONS: -Xmx400m
  18.305 [id=22]	WARNING	c.c.j.p.k.KubernetesCredentialProvider#convertSecret: Failed to convert Secret 'kaniko-secret' of type secretText due to secretText credential is missing the text
Started
Running in Durability level: PERFORMANCE_OPTIMIZED
  25.022 [id=32]	WARNING	i.f.k.c.i.VersionUsageUtils#alert: The client is using resource type 'customresourcedefinitions' with unstable version 'v1beta1'
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /tmp/jenkinsTests.tmp/jenkins2420646818722522650test/workspace/job
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
[Pipeline] }
[Pipeline] // stage
[Pipeline] withCredentials
Masking only exact matches of $CHARTMUSEUM_CREDS or $CHARTMUSEUM_CREDS_USR or $CHARTMUSEUM_CREDS_PSW
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (CI Build and push snapshot)
Stage "CI Build and push snapshot" skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Release)
[Pipeline] dir
Running in /home/jenkins/go/src/github.com/pmuir/test
[Pipeline] {
[Pipeline] git
Cloning the remote Git repository
Cloning repository https://github.com/pmuir/test.git
 > git init /home/jenkins/go/src/github.com/pmuir/test # timeout=10
Fetching upstream changes from https://github.com/pmuir/test.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/pmuir/test.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/pmuir/test.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/pmuir/test.git # timeout=10
Fetching upstream changes from https://github.com/pmuir/test.git
 > git fetch --tags --progress https://github.com/pmuir/test.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 > git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10
Checking out Revision e88a86645d00b9508b2c27c80b359b81f3f3cd20 (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f e88a86645d00b9508b2c27c80b359b81f3f3cd20
 > git branch -a -v --no-abbrev # timeout=10
 > git checkout -b master e88a86645d00b9508b2c27c80b359b81f3f3cd20
Commit message: "Draft create"
First time build. Skipping changelog.
[Pipeline] sh
+ **-release-version
+ echo 0.0.1
[Pipeline] sh
+ cat VERSION
+ ** step tag --version 0.0.1
Updating chart version in charts/test/Chart.yaml to 0.0.1
Updating repository in charts/test/values.yaml to 10.31.246.240:5000/pmuir/test
Updating tag in charts/test/values.yaml to 0.0.1
Tag v0.0.1 created and pushed to remote origin
[Pipeline] sh
+ make build
CGO_ENABLED=0 GO15VENDOREXPERIMENT=1 go build -ldflags '' -o bin/test main.go
[Pipeline] sh
+ cat VERSION
+ export VERSION=0.0.1
+ skaffold build -f skaffold.yaml
time="2019-06-01T16:05:50Z" level=warning msg="config version (skaffold/v1beta2) out of date: upgrading to latest (skaffold/v1beta7)"
Generating tags...
 - pmuir/test -> 10.31.246.240:5000/pmuir/test:0.0.1
Tags generated in 355.88µs
Starting build...
Building [pmuir/test]...
Sending build context to Docker daemon  525.8kBSending build context to Docker daemon  5.539MBSending build context to Docker daemon  6.502MB
Step 1/4 : FROM scratch
 ---> 
Step 2/4 : EXPOSE 8080
 ---> Running in c7970534067a
 ---> 0cd7b47b742d
Step 3/4 : ENTRYPOINT /test
 ---> Running in fade798bc122
 ---> 8f241540d4b6
Step 4/4 : COPY ./bin/ /
 ---> 15a1508fb1c9
Successfully built 15a1508fb1c9
The push refers to a repository [10.31.246.240:5000/pmuir/test]
6c907e5f7b04: Preparing
6c907e5f7b04: Pushed
0.0.1: digest: sha256:d492cc9046e4b6d0b96a2ea052767193d4be8f84a23774f58f29344305c97c3b size: 528
Build complete in 3.000497475s
Starting test...
Test complete in 6.962µs
Complete in 3.017524921s
There is a new version (0.30.0) of Skaffold available. Download it at https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64

[Pipeline] sh
+ cat VERSION
+ ** step post build --image 10.31.246.240:5000/pmuir/test:0.0.1
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Promote to Environments)
[Pipeline] dir
Running in /home/jenkins/go/src/github.com/pmuir/test/charts/test
[Pipeline] {
[Pipeline] sh
+ cat ../../VERSION
+ ** step changelog --version v0.0.1
Using batch mode as inside a pipeline
Generating change log from git ref e88a86645d00b9508b2c27c80b359b81f3f3cd20 => 8e0a5f29f83496cec56d1f9b45d1143f57ad69bc
Failed to enrich commits with issues: User.jenkins.io "-0" is invalid: metadata.name: Invalid value: "-0": a DNS-1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')
Failed to enrich commits with issues: User.jenkins.io "-0" is invalid: metadata.name: Invalid value: "-0": a DNS-1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')
Finding issues in commit messages using git format
No release found for pmuir/test and tag v0.0.1 so creating a new release
Updated the release information at https://github.com/pmuir/test/releases/tag/v0.0.1
generated: /home/jenkins/go/src/github.com/pmuir/test/charts/test/templates/release.yaml
Created Release test-0-0-1 resource in namespace **
Updating PipelineActivity pmuir-test-master-2 with version 0.0.1
Updated PipelineActivities pmuir-test-master-2 with release notes URL: https://github.com/pmuir/test/releases/tag/v0.0.1
[Pipeline] sh
+ ** step helm release
No $CHART_REPOSITORY defined so using the default value of: http://jenkins-x-chartmuseum:8080
Adding missing Helm repo: jenkins-x http://chartmuseum.jenkins-x.io
Successfully added Helm repository jenkins-x.
Adding missing Helm repo: releases http://jenkins-x-chartmuseum:8080
Successfully added Helm repository releases.
No $CHART_REPOSITORY defined so using the default value of: http://jenkins-x-chartmuseum:8080
Uploading chart file test-0.0.1.tgz to http://jenkins-x-chartmuseum:8080/api/charts
Received 201 response: {"saved":true}
[Pipeline] sh
+ cat ../../VERSION
+ ** promote -b --all-auto --timeout 1h --version 0.0.1
prow based install so skip waiting for the merge of Pull Requests to go green as currently there is an issue with gettingstatuses from the PR, see https://github.com/jenkins-x/**/issues/2410
Promoting app test version 0.0.1 to namespace **-staging
Waiting for the fork of ***********/environment-pmuir-**-dev-staging to appear...
Forked Git repository to https://github.com/***********/environment-pmuir-**-dev-staging

Created Pull Request: https://github.com/muirp/environment-pmuir-**-dev-staging/pull/1

Pull Request https://github.com/muirp/environment-pmuir-**-dev-staging/pull/1 is merged at sha 876dd08c695c9e2314ccdcfdd4740f7e53d0017c
Pull Request merged but we are not waiting for the update pipeline to complete!
Could not find the service URL in namespace **-staging for names test, **-test, **-staging-test
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
